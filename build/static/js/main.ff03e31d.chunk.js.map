{"version":3,"sources":["components/UserList.js","newestAttempt.js","serviceWorker.js","index.js"],"names":["UserList","props","users","handleUserClick","listElements","map","user","onClick","style","listStyleType","peerConnection","myStream","localVideo","remoteVideo","targetUser","dataChannel","myLocation","socket","openSocket","window","location","origin","replace","pcConfig","App","useState","myID","setMyID","setUsers","remoteLocation","setRemoteLocation","showTextInput","setShowTextInput","setReadyToInitialize","useEffect","fetch","then","res","json","data","console","log","state","country_name","on","filter","userID","a","offersID","JSON","stringify","offer","navigator","mediaDevices","getUserMedia","video","audio","setStream","RTCPeerConnection","getTracks","forEach","track","addTrack","ondatachannel","receiveDataChannel","setRemoteDescription","ontrack","receivedStream","onicecandidate","sendIceCandidate","createAnswer","answer","setLocalDescription","emit","document","getElementById","value","candidate","addIceCandidate","RTCIceCandidate","e","tempTargetUser","target","innerText","createDataChannel","ordered","maxPacketLifeTime","onopen","onmessage","dataChannelMessage","createOffer","sendTextMessage","textarea","messagesContainer","textContent","scrollTop","scrollHeight","send","width","muted","srcObject","error","src","URL","createObjectURL","event","streams","channel","className","length","id","autoPlay","type","height","fontSize","onKeyUp","key","maxHeight","overflowY","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff03e31d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function UserList(props) {\n    const {users, handleUserClick} = props\n\n    const listElements = users.map((user) => {\n        return <li onClick={handleUserClick}>{user}</li>\n    })\n\n    return (\n        <div>\n            <ul style={{listStyleType: \"none\"}}>\n                {listElements}\n            </ul>\n        </div>\n    )\n}\n","import React, { useEffect, useState, Fragment } from 'react';\nimport './App.css';\nimport openSocket from 'socket.io-client';\nimport UserList from './components/UserList'\n// const port = process.env.PORT || 8000;\n\n// console.log(`ws://${window.location.hostname}:${port}`)\nvar socket = openSocket(window.location.origin.replace(/^http/, 'ws'));\nvar peerConnection\nvar myStream\nvar localVideo\nvar remoteVideo\nvar pcConfig = {\n    'iceServers': [\n      {'urls': 'stun:stun.l.google.com:19302'},\n      {\"urls\":\"turn:numb.viagenie.ca\", \"username\":\"webrtc@live.com\", \"credential\":\"muazkh\"}\n  ]\n  };\nvar targetUser\nvar dataChannel\nvar myLocation\n\nfunction App() {\n    const [myID, setMyID] = useState(null)\n    const [users, setUsers] = useState([])\n    const [remoteLocation, setRemoteLocation] = useState(null)\n    const [showTextInput, setShowTextInput] = useState(false)\n    const [streamInitialized, setStreamInitialized] = useState(false)\n    const [readyToInitialize, setReadyToInitialize] = useState(false)\n\n\n    useEffect(() => {\n\n        fetch(\"https://geolocation-db.com/json/\")\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n            const location = data.state ? `${data.state}, ${data.country_name}` : `${data.country_name}`\n            myLocation = location})\n\n        socket.on('get_id', data => {\n            console.log(\"Connected to websocket\")\n            setMyID(data.myID)\n            setUsers(data.users)\n        })\n\n    }, [])\n\n    useEffect(() => {\n        if (myID) {\n            socket.on('new_person', data => {\n                setUsers(data.filter((userID => {\n                    return userID !== myID\n                })))\n            })\n\n            socket.on('remove_user', (data) => {\n                setUsers(data.filter((userID => {\n                    return userID !== myID\n                })))\n            })\n\n            socket.on('incoming_offer', async(data) => {\n                console.log(`Incoming offer from ${data.offersID}: ${JSON.stringify(data.offer)}`)\n                console.log(data)\n                targetUser = data.offersID\n                setRemoteLocation(data.location)\n\n                myStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\n                setStream()\n                peerConnection = new RTCPeerConnection(pcConfig)\n                myStream.getTracks().forEach(track => peerConnection.addTrack(track, myStream))\n                peerConnection.ondatachannel = receiveDataChannel\n                // dataChannel = peerConnection.createDataChannel('text', {\n                //     ordered: true, // guarantees order\n                //     maxPacketLifeTime: 3000\n                //   })\n                // dataChannel.onopen = () => {console.log(\"DataChannel Open\")}\n                // dataChannel.onmessage = dataChannelMessage\n                peerConnection.setRemoteDescription(data.offer)\n                peerConnection.ontrack = receivedStream\n                peerConnection.onicecandidate = sendIceCandidate\n                peerConnection.createAnswer().then((answer) => {\n                    peerConnection.setLocalDescription(answer)\n                    socket.emit('answer_to_user', {\n                        targetUser: data.offersID,\n                        answer: answer,\n                        location: myLocation\n                    })\n                    document.getElementById('yourID').value = JSON.stringify(answer)\n                })\n\n                document.getElementById('otherID').value = JSON.stringify(data.offer)\n                // setStreamInitialized(true)\n            })\n\n            socket.on('incoming_answer', function (data) {\n                console.log(data)\n                setRemoteLocation(data.location)\n                console.log(`Incoming answer: ${JSON.stringify(data.answer)}`)\n                peerConnection.setRemoteDescription(data.answer)\n                document.getElementById('otherID').value = JSON.stringify(data.answer)\n                console.log(peerConnection)\n                setShowTextInput(true)\n                // setStreamInitialized(true)\n            })\n\n            socket.on(\"incoming_candidate\", function (candidate){\n                console.log(\"candidate\", candidate)\n                if (peerConnection) {\n                    peerConnection.addIceCandidate(new RTCIceCandidate(candidate))\n                }\n            })\n        }\n    }, [myID])\n\n    const handleUserClick = async(e) => {\n        const tempTargetUser = e.target.innerText\n        targetUser = tempTargetUser\n\n        myStream = await navigator.mediaDevices.getUserMedia({video: true, audio: true});\n        setStream()\n        peerConnection = new RTCPeerConnection(pcConfig)\n        myStream.getTracks().forEach(track => peerConnection.addTrack(track, myStream))\n        dataChannel = peerConnection.createDataChannel('text', {\n            ordered: true, // guarantees order\n            maxPacketLifeTime: 3000\n          })\n        dataChannel.onopen = () => {console.log(\"DataChannel Open\")}\n        dataChannel.onmessage = dataChannelMessage\n        peerConnection.ontrack = receivedStream\n        peerConnection.onicecandidate = sendIceCandidate\n\n        peerConnection.createOffer().then((offer) => {\n            peerConnection.setLocalDescription(offer)\n            socket.emit('offer_to_user', {\n                targetUser: tempTargetUser,\n                myID: myID,\n                offer: offer,\n                location: myLocation\n            })\n            document.getElementById('yourID').value = JSON.stringify(offer)\n        })\n\n    }\n\n    const hasUserMedia = () => { \n        //check if the browser supports the WebRTC \n        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || \n           navigator.mozGetUserMedia); \n      } \n\n    const sendTextMessage = () => {\n        const textarea = document.getElementById('yourMessage')\n        let messagesContainer = document.getElementById('messages')\n\n        messagesContainer.textContent = messagesContainer.textContent + \"Me: \" + textarea.value + \"\\n\" + \"------\\n\"\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        dataChannel.send(textarea.value)\n        textarea.value = \"\"\n    }\n\n    const handleTextAreaEnter = (event) => {\n        if (event.key === \"Enter\") {\n            const textarea = document.getElementById('yourMessage')\n            textarea.value = textarea.value\n            sendTextMessage()\n        }\n    }\n    \n    const setStream = () => {\n        localVideo = document.getElementById('myVideo'); \n        localVideo.width = 500\n        localVideo.muted = true\n        try {\n            localVideo.srcObject = myStream;\n        } catch (error) {\n            localVideo.src = window.URL.createObjectURL(myStream);\n        }\n\n        setReadyToInitialize(true)\n    }\n\n    const receivedStream = (event) => {\n        remoteVideo = document.getElementById('theirVideo')\n        remoteVideo.width = 500\n\n        console.log(event)\n        try {\n            remoteVideo.srcObject = event.streams[0];\n        } catch (error) {\n            remoteVideo.src = window.URL.createObjectURL(event.streams[0]);\n        }\n        \n        console.log(localVideo.srcObject)\n        console.log(remoteVideo.srcObject)\n    }\n\n    const sendIceCandidate = (event) => {\n        if (event.candidate) {\n            socket.emit('candidate', {candidate: event.candidate, targetUser: targetUser})\n        }\n    }\n\n    const dataChannelMessage = (event) => {\n        let messagesContainer = document.getElementById('messages')\n        messagesContainer.textContent = messagesContainer.textContent + event.data + \"\\n\" + \"------\\n\"\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    const receiveDataChannel = (event) => {\n        dataChannel = event.channel\n        dataChannel.onopen = () => {console.log(\"DataChannel Open\")}\n        dataChannel.onmessage = dataChannelMessage\n        setShowTextInput(true)\n    }\n\n    return (\n        <div className=\"App\">\n\n            {users.length > 0 ? <UserList users={users} handleUserClick={handleUserClick}></UserList> : null}\n\n            <button >Users</button><br />\n            \n            {remoteLocation && targetUser ? \n            <Fragment>\n                <strong id=\"remote-user\">Connected to: {targetUser}</strong><br/>\n                <strong id=\"remote-location\">Location: {remoteLocation}</strong><br/>\n            </Fragment> : null\n            }\n\n            <video id=\"myVideo\" autoPlay></video>\n            <spacer type=\"block\"> </spacer>\n            <video id=\"theirVideo\" autoPlay></video>\n            <br></br>\n            <br></br>\n            { showTextInput ? \n            <Fragment>\n            <label>Enter message</label><br />\n            <input id=\"yourMessage\" type=\"text\" style={{width: 190, height: 25, fontSize: 16}} onKeyUp={handleTextAreaEnter}></input>\n            <button id=\"send\" onClick={sendTextMessage}>Send</button>\n            <pre id=\"messages\" style={{maxHeight: 150, overflowY: \"scroll\"}}></pre> <br />\n            </Fragment>\n            : null\n            }\n            \n            <label>Your ID:</label><br />\n            <textarea id=\"yourID\"></textarea><br />\n            <label>Other ID:</label><br />\n            <textarea id=\"otherID\"></textarea><br />\n\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App from './newestAttempt'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}